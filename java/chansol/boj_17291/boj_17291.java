package chansol.boj_17291;
import java.util.*;
/*
실험실에서 새로운 종의 벌레 한 마리가 탄생하였다.
벌레는 스스로 분열하며, 분열하면 자기 자신과 같은 벌레를 한 마리 만들어 내게 된다. 벌레가 분열하는 규칙은 다음과 같다.

벌레는 기준년도 1년 2월에 1마리가 탄생한다.
벌레는 매년 1월이 되면 분열한다. 분열시 본래의 개체는 그대로, 새로운 개체가 하나 탄생하는 것으로 본다.
홀수년도에 탄생한 개체는 3번 분열시, 짝수년도에 탄생한 개체는 4번 분열시 사망한다.
예를 들어, 기준년도 1년 2월에 존재하던 벌레는, 2년 1월, 3년 1월, 4년 1월에 분열하고
사망하여 4년 말에는 존재하지 않게 된다. 이 때, N년 말에 존재하는 벌레의 수를 구하여라.
*/

public class boj_17291 {

    static int[] memo;
    public static int bug(int year) {
        if(year==1){
            return 1;
        }
        else if(year==2){
            return 2;
        }
        else if(year==3){
            return 4;
        }
        else if(year==4){
            return 7;
        }
        else {
            if (memo[year] == 0) {
                memo[year] = bug(year - 1) * 2;
                if (year % 2 == 0) {
                    memo[year] = bug(year - 1) * 2 - (bug(year - 4) + bug(year - 5));
                }
            }
            return memo[year];
        }
    }
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);

        int year = sc.nextInt();
        memo = new int[year+1];
        System.out.println(bug(year));

        //year = 1; 1-0=1마리, 홀수 벌레(0번분열:1) 짝수 벌레 0
        //year = 2; 2-0=2마리, 홀수 벌레(1번분열:1) 짝수 벌레(0번분열1)
        //year = 3; 4-0=4마리, 홀수 벌레(0번 분열:2,2번분열:1),짝수벌레(1번분열1)
        //year = 4; 8-1=7마리, 홀수 벌레(1번 분열:2,3번분열:1죽음),짝수벌레(0번분열 4, 2번분열1 )       year=1일때 홀수 벌레수 만큼죽음(year1총벌레수)
        //year = 5; 14-0=14,홀수벌레(0번분열:7 ,2번분열:2),짝수벌레(1번분열4,3번분열1)
        //year = 6; 28-3=25  ,홀수벌레(1번분열;7,3번분열:2죽음),짝수벌레(0번분열14,2번분열4,4번분열1(죽음)     year3일때 홀수, 2일때 짝수(year2일때 총벌레수+year1일때 총벌레수)
        //year = 7; 50-0=50  ,홀수벌레(0번분열25,2번분열:7),짝수벌레(1번분열14,3번분열4)
        //year = 8; 100-11=89  ,홀수벌레(1번분열25,3번분열7죽음),짝수벌레(0번분열50,2번분열14,4번분열4죽음)    year5일때 홀수,4일때 짝수(year4일때 총벌레수+year3일때 총벌레수)
        //year = 9; 178-   ,홀수벌레(0번분열89,2번분열25),짝수벌레(1번분열50,3번분열14)

        //n=홀수
        //n 년도에는 아무 벌레도 죽지않음
        //n+1번째 년도에는 n때 벌레*2 -((n-4)때 벌레+(n-5)때 벌레;

    }
}
